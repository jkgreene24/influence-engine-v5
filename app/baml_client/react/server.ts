/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
'use server'

import { b } from '../index';
import type { Check, Checked  } from "../types";
import type { Image, Audio } from "@boundaryml/baml";

import type {  Message,  ResponseChat,  SwitchInfluenceStyle,  UserMetadata } from "../types"

import type * as types from "../types"

/**
 * Regular BAML server actions that return direct responses.
 */

/**
 * Executes the "Betty" BAML action.
 *
 * This server action calls the underlying BAML function "Betty"
 * with the specified parameters.
 *
 * @param { string } instruction - Input parameter.
 * @param { Message[] } messages - Input parameter.
 * @param { string } relevant_feedbacks - Input parameter.
 * @param { UserMetadata } user_metadata - Input parameter.
 * @param { string } user_memory - Input parameter.
 *
 * @returns {Promise<ResponseChat>} A promise that resolves with the result of the action.
 */
export const Betty = async (
  instruction: string,
  messages: Message[],
  relevant_feedbacks: string,
  user_metadata: UserMetadata,
  user_memory: string,
): Promise<ResponseChat> => {
  return b.Betty(
    instruction,
    messages,
    relevant_feedbacks,
    user_metadata,
    user_memory,
  );
};

/**
 * Executes the "InitialMessageChat" BAML action.
 *
 * This server action calls the underlying BAML function "InitialMessageChat"
 * with the specified parameters.
 *
 * @param { string } instruction - Input parameter.
 * @param { string } relevant_feedbacks - Input parameter.
 * @param { string } user_influence_style - Input parameter.
 * @param { string } user_memory - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const InitialMessageChat = async (
  instruction: string,
  relevant_feedbacks: string,
  user_influence_style: string,
  user_memory: string,
): Promise<string> => {
  return b.InitialMessageChat(
    instruction,
    relevant_feedbacks,
    user_influence_style,
    user_memory,
  );
};